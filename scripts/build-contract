#!/usr/bin/env bash
# ------------------------------------------------------------------
# Builds ink! contract source code for the provided build options.
#
# Expects that the variable 'SRC_ROOT' is specified by 
# the calling context.
# ------------------------------------------------------------------
set -eu

build_mode=${BUILD_MODE:-Release}
cargo_contract_version=${CARGO_CONTRACT_VERSION:-2.0.0-alpha.4}
rust_toolchain=${RUST_TOOLCHAIN:-stable-x86_64-unknown-linux-gnu}
keep_debug_symbols=${KEEP_DEBUG_SYMBOLS:-false}
optimization_passes=${OPTIMIZATION_PASSES:-Z}

echo "Build Info

- build_mode: ${build_mode}
- cargo_contract_version: ${cargo_contract_version}
- rustc_toolchain: ${rust_toolchain}
- optimization_passes: ${optimization_passes}
- keep_debug_symbols: ${keep_debug_symbols}
"

echo "In SRC_ROOT"
ls -lah $SRC_ROOT

# 1. Setup toolchain

rustup toolchain install "${rust_toolchain}"
rustup target add wasm32-unknown-unknown --toolchain "${rust_toolchain}"
rustup component add rust-src --toolchain "${rust_toolchain}"

# Install ink! cargo-contract tool
# TODO: allow 2.0.0-alpha.4 and upwards, are in crates.io
if [ $cargo_contract_version == "2.0.0-alpha.4" ]; then
  # Install unreleased cargo contract tool, needed because build info
  # still not available
  cargo install --git https://github.com/paritytech/cargo-contract \
                --locked --rev e2e804be3bab2a987f0441fb8025a5a82da1c10e --force
else
  cargo install --version "${cargo_contract_version}" cargo-contract
fi

# 2. Build contract

BUILD_PARAMS=""

if [ $build_mode == "Release" ]; then
  # release is a boolean flag
  BUILD_PARAMS="${BUILD_PARAMS} --release"
fi

if [ $keep_debug_symbols == "true" ]; then
  BUILD_PARAMS="${BUILD_PARAMS} --keep-debug-symbols"
fi

BUILD_PARAMS="${BUILD_PARAMS} --optimization-passes ${optimization_passes}"

echo "SRC_ROOT=$SRC_ROOT"
echo "BUILD_PARAMS=$BUILD_PARAMS"
cargo contract -V

cd $SRC_ROOT

cargo +"${rust_toolchain}" contract build ${BUILD_PARAMS}
